/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.patientFamilyRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Enterprise.EnterprizeType;
import Business.Enterprise.EnterpriseDirectory;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientFamilyOrganization;
import Business.Role.CareGiverRole;
import Business.Role.PatientRole;
import Business.Role.Role;
import Business.State.State;
import Business.UserAccount.UserAccount;
import Business.city.City;
import java.awt.CardLayout;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import java.lang.Math;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
//import static userinterface.patientFamilyRole.TrackLocationJPanel.getLatLongPositions;

/**
 *
 * @author varsha
 */
public class PatientFamilyWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientFamilyWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private PatientFamilyOrganization organization;
    private Enterprise enterprise;
    private CareGiverRole caregiverRole;
    private PatientRole patientRole;
    //private EnterpriseDirectory enterpriseDirectory;
    private EcoSystem business;
    private String latLongs[];
    private String sourceLongs[];
    public PatientFamilyWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, PatientFamilyOrganization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        caregiverRole = new CareGiverRole();
        this.business = business;
        patientRole = new PatientRole();
        //enterpriseDirectory = new EnterpriseDirectory();
       // populateComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        monitorHealthJButton = new javax.swing.JButton();
        trackLocationJButton = new javax.swing.JButton();
        viewMessageJButton = new javax.swing.JButton();
        findADoctorJPanel = new javax.swing.JButton();
        viewPatientCheckListJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel1.setText("Welcome!");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 150, 24));

        monitorHealthJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        monitorHealthJButton.setText("Monitor Health");
        monitorHealthJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitorHealthJButtonActionPerformed(evt);
            }
        });
        add(monitorHealthJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 210, 40));

        trackLocationJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        trackLocationJButton.setText("Track Location");
        trackLocationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackLocationJButtonActionPerformed(evt);
            }
        });
        add(trackLocationJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 210, 42));

        viewMessageJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        viewMessageJButton.setText("View Messages");
        viewMessageJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMessageJButtonActionPerformed(evt);
            }
        });
        add(viewMessageJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 210, 43));

        findADoctorJPanel.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        findADoctorJPanel.setText("Schedule Appointment");
        findADoctorJPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findADoctorJPanelActionPerformed(evt);
            }
        });
        add(findADoctorJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 333, 210, 46));

        viewPatientCheckListJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        viewPatientCheckListJButton.setText("View Patients Checklist");
        viewPatientCheckListJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientCheckListJButtonActionPerformed(evt);
            }
        });
        add(viewPatientCheckListJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 271, 210, 44));
    }// </editor-fold>//GEN-END:initComponents

    private void trackLocationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackLocationJButtonActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,"Tracking is in process..Thank you for your patience!");
        String name = "";
        try {
            // TODO add your handling code here:
            name = generateAddress();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Sorry! Unable to track.");
        }
        double distance = 0.0;
        double x1 = Double.parseDouble(latLongs[0]);
        double x2 = Double.parseDouble(sourceLongs[0]);
        double y1 = Double.parseDouble(latLongs[1]);
        double y2 = Double.parseDouble(sourceLongs[1]);
        //calculate distance between source and destination
        distance = Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
        System.out.print(distance);
        TrackLocationJPanel tljp = new TrackLocationJPanel(userProcessContainer, name, distance, account, organization, business);
        userProcessContainer.add("TrackLocationJPanel", tljp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_trackLocationJButtonActionPerformed
   

    public String generateAddress() throws Exception {
        String[] givenNames = new String[]{
            "Massachusetts Avenue", "Melnea Cass Boulevard", "Merchants Row", "Morton Street",
            "Antwerp Street", "Norway Street", "Raven Street", "Dorchester", "West Roxbury",
            "South Boston", "Brighton", "Roxbury", "Ruggles Street", "St. Germain Street", "Clearway Street",
            "Rill Street", "Hyde Park", "Wigglesworth Street", "Woodstock Avenue", "Tremont Street",
            "Bolyston Street", "Wait Street", "Unity Street", "Shawmut Street", "Hemenway Street", 
            "Tesla Street", "Symphony Road", "Huntington Avenue", "Chestnut Hill", "Parker Hill",
            "Park Drive", "Warren St", "Winthrop St", "Washington St", "St. Alphonsus St", "Calumet St",
            "Sunset St", "Longwood Avenue", "Heath St", "Brookline Avenue", "Harvard St", "Foster St", 
            "Stearns Rd", "Beacon St", "Summit Ave", "Atherton Rd", "Short St", "Wellman St", "Chatham St",
            "Kent St", "Sewall Ave", "Beech Rd", "Colchester St", "Autumn St", "Darling St", "Glen Rd", 
            "Hillside St", "Francis St", "St Botolph St", "W Newton St", "Belidere St", "Borway St",
            "Burbank St", "Dartmouth St", "Berkeley St", "Newbury St", "Stuart St", "Harrison Ave",
            "Bedford St", "Herald St", "Oxford St", "Bond Drive", "Oliver St",
            "Persl St", "Franklin St", "India St", "Somerset Street", "Ashburton PI", "Derne St",
            "Hancock St", "Cambridge St", "Fruit St", "Myrtle St", "Chestnut St", "Byron St", 
            "Branch St", "Willow St", "Marlborough St", "Commonwealth Avenue", "Fairfield St", 
            "Peterborough St", "Queensberry St", "Kilmarnock St", "Florence St", "Lyon Rd"
        };
        Random random = new Random();
        String name = givenNames[random.nextInt(givenNames.length)];
        latLongs = getLatLongPositions(name);
        //sourceLongs =getLatLongPositions(patientRole.getSourceLocation());
        sourceLongs=getLatLongPositions("Burbank St.");
        System.out.println(name);

        System.out.println("Latitude: " + latLongs[0] + " and Longitude: " + latLongs[1]);
        return name;
    }

    public static String[] getLatLongPositions(String address) throws Exception {
        int responseCode = 0;
        String api = "http://maps.googleapis.com/maps/api/geocode/xml?address=" + URLEncoder.encode(address, "UTF-8") + "&sensor=true";
        URL url = new URL(api);
        HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
        httpConnection.connect();
        responseCode = httpConnection.getResponseCode();
        if (responseCode == 200) {
            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();;
            Document document = builder.parse(httpConnection.getInputStream());
            XPathFactory xPathfactory = XPathFactory.newInstance();
            XPath xpath = xPathfactory.newXPath();
            XPathExpression expr = xpath.compile("/GeocodeResponse/status");
            String status = (String) expr.evaluate(document, XPathConstants.STRING);
            if (status.equals("OK")) {
                expr = xpath.compile("//geometry/location/lat");
                String latitude = (String) expr.evaluate(document, XPathConstants.STRING);
                expr = xpath.compile("//geometry/location/lng");
                String longitude = (String) expr.evaluate(document, XPathConstants.STRING);
                return new String[]{latitude, longitude};
            } else {
                throw new Exception("Error from the API - response status: " + status);
            }
        }
        return null;
    }
    private void monitorHealthJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitorHealthJButtonActionPerformed
        // TODO add your handling code here:
        MonitorHealthJPanel mhjp = new MonitorHealthJPanel(userProcessContainer, business, account);
        userProcessContainer.add("MonitorHealthJPanel", mhjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_monitorHealthJButtonActionPerformed

    private void viewMessageJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMessageJButtonActionPerformed
        // TODO add your handling code here:
        ViewMessageJPanel vmjp = new ViewMessageJPanel(userProcessContainer, account, organization);
        userProcessContainer.add("ViewMessageJPanel", vmjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewMessageJButtonActionPerformed

    private void findADoctorJPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findADoctorJPanelActionPerformed
        // TODO add your handling code here:
        
        
            FindANeurologistJPanel fadjp = null;
        try {
            fadjp = new FindANeurologistJPanel(userProcessContainer, account, business);
        } catch (ParseException ex) {
            Logger.getLogger(PatientFamilyWorkAreaJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
            userProcessContainer.add("FindADoctorJPanel", fadjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        
    }//GEN-LAST:event_findADoctorJPanelActionPerformed

    private void viewPatientCheckListJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientCheckListJButtonActionPerformed
        // TODO add your handling code here:
        ViewCheckListJPanel vpcjp = new ViewCheckListJPanel(userProcessContainer, account, business, organization);
        userProcessContainer.add("ViewCheckListJPanel", vpcjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewPatientCheckListJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton findADoctorJPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton monitorHealthJButton;
    private javax.swing.JButton trackLocationJButton;
    private javax.swing.JButton viewMessageJButton;
    private javax.swing.JButton viewPatientCheckListJButton;
    // End of variables declaration//GEN-END:variables
}
