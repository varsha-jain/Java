/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.patientFamilyRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Neurologist.Neurologist;
import Business.Organization.CareGiverOrganization;
import Business.Organization.NeurologistOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.PatientFamily.PatientFamily;
import Business.State.State;
import Business.TimeSlot.TimeSlot;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ContactCareGiver;
import Business.WorkQueue.PatientFamilyToNeurologist;
import Business.WorkingDays.WorkingDays;
import Business.city.City;
import com.toedter.calendar.DateUtil;
import com.toedter.calendar.IDateEvaluator;
import com.toedter.calendar.JCalendar;
import java.awt.CardLayout;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author varsha
 */
public class FindANeurologistJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FindANeurologistJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem business;
    public FindANeurologistJPanel(JPanel userProcessContainer,UserAccount account, EcoSystem business) throws ParseException {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.business = business;
        populateNeurologistName();
        
    }

    public void populateNeurologistName()
    {
        for(State state : business.getStateList())
        {
            for(City city : state.getCityList())
            {
                for(Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList())
                {
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        for(PatientFamily pf : org.getPatientFamilyDirectory().getPatientFamilyList())
                        {
                            if(pf.getMemberName().equalsIgnoreCase(account.getEmployee().getName()))
                                neurologistName.setText(pf.getPatient().getNeurologist().getName());
                        }
                    }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        scheduleAppointmentJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dateJDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        timeSlotJComboBox = new javax.swing.JComboBox<>();
        neurologistName = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel2.setText("Schedule an Appointment with: ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 62, 210, 29));

        scheduleAppointmentJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        scheduleAppointmentJButton.setText("Schedule Appointment");
        scheduleAppointmentJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleAppointmentJButtonActionPerformed(evt);
            }
        });
        add(scheduleAppointmentJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 252, 230, 35));

        backJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 18, 85, 33));

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel1.setText("Select Date:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 124, 143, 29));

        dateJDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateJDatePickerActionPerformed(evt);
            }
        });
        add(dateJDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(181, 124, 175, 29));

        jLabel3.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel3.setText("Time Slots:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 171, 143, 33));

        timeSlotJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9am-11am", "12pm-2pm", "2pm-4pm", "7pm-9pm" }));
        add(timeSlotJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(181, 171, 175, 33));

        neurologistName.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        add(neurologistName, new org.netbeans.lib.awtextra.AbsoluteConstraints(218, 62, 251, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void scheduleAppointmentJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleAppointmentJButtonActionPerformed
        // TODO add your handling code here:
         //create a work req as appointment and add in doctor's work queue
         String timeSlot = (String)timeSlotJComboBox.getSelectedItem();
         boolean isAppointmentOpen = false;
         Date d = dateJDatePicker.getDate();
         Date now = new Date();
         boolean flag = false;
         boolean flagTime = false;
        SimpleDateFormat simpleDateformat = new SimpleDateFormat("EEEE"); // the day of the week abbreviated
       // System.out.println(simpleDateformat.format(d));
        String day = simpleDateformat.format(d);
        for(State state : business.getStateList())
        {
            for(City city : state.getCityList())
            {
                for(Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList())
                {
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        for(Neurologist neuro : org.getNeuroList().getNeurologistList())
                        {
                           if(neuro.getName().equalsIgnoreCase(neurologistName.getText())){
                            for(WorkingDays wd : neuro.getWorkingDaysList().getWorkingDaysList())
                            {
                               for(TimeSlot ts:neuro.getTimeslotList().getTimeSlotList()){
                                if(wd.getWorkingDay().toLowerCase().equalsIgnoreCase(simpleDateformat.format(d).toLowerCase()))
                                {
                                      flag = true;      //neuro.set
                                }
                                
                                if(ts.getTime().equalsIgnoreCase(timeSlot))
                                {
                                    flagTime = true;
                                }
                                if(flag==true && flagTime == true){
                                    ts.setiSlotAvailable(true);
                                    isAppointmentOpen = true;
                                }
                             }
                            }
                           }
                        }
                    }
                }
            }
        }
        //TimeSlot ts = 
        String message = "Appointment Scheduled";
         UserAccount neurologistUserAccount = null;
       for (State state : business.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise e : city.getEnterprizeDirectory().getEnterprizeList()) {
                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                        for (UserAccount ua : o.getUserAccountDirectory().getUserAccountList()) {
                            if(ua.getUsername().equalsIgnoreCase(neurologistName.getText()))
                            {
                                neurologistUserAccount  = ua;
                            }
                            
                        }
                        
                    }
                }
            }
         }
        PatientFamilyToNeurologist request = new PatientFamilyToNeurologist();
        
        if(isAppointmentOpen == true){
        request.setMessage(message);
        request.setSender(account);
        request.setStatus("Sent");
        request.setDay(day);
        request.setTimeSlot(timeSlot);
        request.setD(d);
        //request.setReceiverName(neurologistName.getText());
        request.setReceiver(neurologistUserAccount);
       Patient patient = null;
        for(State state : business.getStateList())
        {
            for(City city : state.getCityList())
            {
                for(Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList())
                {
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        for (PatientFamily pf : org.getPatientFamilyDirectory().getPatientFamilyList())
                        {
                            if(pf.getMemberName().equalsIgnoreCase(account.getEmployee().getName()))
                            {
                                patient  = pf.getPatient();
                            }
                        }
                    }
                    
                }
            }
        }
                   
        request.setPatientName(patient.getName());
        request.setTimeSlot(timeSlot);
        
        
      /*   Organization org = null;
        UserAccount neurologistUserAccount = null;
        
        
        
        
        
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            account.getWorkQueue().getWorkRequestList().add(request);
        }
        JOptionPane.showMessageDialog(null, "Appointment booked successfully!");
        }
        else
           JOptionPane.showMessageDialog(null, "Sorry! Please choose another date."); 
        */
        
      
        //request.setReceiver(account);
        
        //messageJTextField.setText(" ");
        
        Organization org = null;
        UserAccount userAcct = null;
        for (State state : business.getStateList()) {
        for (City city : state.getCityList()) {
        for (Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList()) {
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof NeurologistOrganization){
                for(UserAccount nuseracct : organization.getUserAccountDirectory().getUserAccountList())
                {
                    if(nuseracct.getUsername().equalsIgnoreCase(neurologistUserAccount.getUsername()))
                    {
                        userAcct = nuseracct;
                        org = organization;
                        break;    
                    }
                }
                         
            }
        }
        }
        }
        }
                
                
        if (org!=null){
           //org.getWorkQueue().getWorkRequestList().add(request);
            userAcct.getWorkQueue().getWorkRequestList().add(request);
            account.getWorkQueue().getWorkRequestList().add(request);
            JOptionPane.showMessageDialog(null,"Request successfully submitted", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
            
        }      
    }//GEN-LAST:event_scheduleAppointmentJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void dateJDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateJDatePickerActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_dateJDatePickerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private org.jdesktop.swingx.JXDatePicker dateJDatePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel neurologistName;
    private javax.swing.JButton scheduleAppointmentJButton;
    private javax.swing.JComboBox<String> timeSlotJComboBox;
    // End of variables declaration//GEN-END:variables
}
class RangeEvaluator implements IDateEvaluator {

    private DateUtil dateUtil = new DateUtil();

    @Override
    public boolean isSpecial(Date date) {
       return false; //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Color getSpecialForegroundColor() {
    return null;    
    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Color getSpecialBackroundColor() {
        return null;
//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getSpecialTooltip() {
        return null;
// throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean isInvalid(Date date) {
        return dateUtil.checkDate(date);
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Color getInvalidForegroundColor() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        return null;
    }

    @Override
    public Color getInvalidBackroundColor() {
         return null;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getInvalidTooltip() {
         return null;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

     public void setStartDate(Date startDate) {
        dateUtil.setMinSelectableDate(startDate);
    }

    /**
     * @return the initial date in the range to be validated.
     */
    public Date getStartDate() {
        return dateUtil.getMinSelectableDate();
    }

    /**
     * Sets the final date in the range to be validated.
     * @param  
     */
    public void setEndDate(Date endDate) {
        dateUtil.setMaxSelectableDate(endDate);
    }

    /**
     * @return the final date in the range to be validated.
     */
    public Date getEndDate() {
        return dateUtil.getMaxSelectableDate();
    }           
}
