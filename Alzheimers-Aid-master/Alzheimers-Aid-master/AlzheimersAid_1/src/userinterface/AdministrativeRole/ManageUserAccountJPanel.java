/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdministrativeRole;

import Business.Caregiver.Caregiver;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Business.EcoSystem;
import Business.Neurologist.Neurologist;
import static Business.Organization.Organization.Type.Neurologist;
import Business.Patient.Patient;
import Business.Patient.PatientDirectory;
import Business.PatientFamily.PatientFamily;
import Business.PatientFamily.PatientFamilyDirectory;
import Business.State.State;
import Business.city.City;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class ManageUserAccountJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserAccountJPanel
     */
    private JPanel container;
    private Enterprise enterprise;
    private EcoSystem system;
    private PatientDirectory pd;
    private PatientFamilyDirectory pfd;
    public ManageUserAccountJPanel(JPanel container, Enterprise enterprise, EcoSystem system,PatientDirectory pd, PatientFamilyDirectory pfd) {
        initComponents();
        this.enterprise = enterprise;
        this.container = container;
        this.system = system;
        listOfPatientsJComboBox.setVisible(false);
        careGiverJComboBox.setVisible(false);
        NeurologistJComboBox.setVisible(false);
        patientsJLabel.setVisible(false);
        caregiversJLabel.setVisible(false);
        neurologistJLabel.setVisible(false);
        this.pd = pd;
        
        this.pfd = pfd;
        popOrganizationComboBox();
        // employeeJComboBox.removeAllItems();
        popData();
        displayFamily();
        
        
        Organization organization = (Organization)organizationJComboBox.getSelectedItem();
       
    }

    public void popOrganizationComboBox() {
        organizationJComboBox.removeAllItems();

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            organizationJComboBox.addItem(organization);
        }
        
        
        
    }

    public void populateEmployeeComboBox(Organization organization) {
        employeeJComboBox.removeAllItems();

        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()) {
            employeeJComboBox.addItem(employee);
        }
    }

    private void populateRoleComboBox(Organization organization) {
        roleJComboBox.removeAllItems();
        for (Role role : organization.getSupportedRole()) {
            roleJComboBox.addItem(role);
        }
    }

    public void popData() {

        DefaultTableModel model = (DefaultTableModel) userJTable.getModel();

        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                Object row[] = new Object[2];
                row[0] = ua;
                row[1] = ua.getRole();
                ((DefaultTableModel) userJTable.getModel()).addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createUserJButton = new javax.swing.JButton();
        nameJTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        passwordJTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        employeeJComboBox = new javax.swing.JComboBox();
        backjButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        organizationJComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        roleJComboBox = new javax.swing.JComboBox();
        patientsJLabel = new javax.swing.JLabel();
        listOfPatientsJComboBox = new javax.swing.JComboBox();
        caregiversJLabel = new javax.swing.JLabel();
        careGiverJComboBox = new javax.swing.JComboBox<>();
        neurologistJLabel = new javax.swing.JLabel();
        NeurologistJComboBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        createUserJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        createUserJButton.setText("Create");
        createUserJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserJButtonActionPerformed(evt);
            }
        });
        add(createUserJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 380, 200, 40));
        add(nameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 330, 200, 30));

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel1.setText("User Name");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 100, 30));

        userJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userJTable);
        if (userJTable.getColumnModel().getColumnCount() > 0) {
            userJTable.getColumnModel().getColumn(0).setResizable(false);
            userJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, 370, 120));

        jLabel2.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel2.setText("Password");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, 70, 30));
        add(passwordJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 330, 200, 30));

        jLabel3.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel3.setText("Employee");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 170, 70, 30));

        employeeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(employeeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 170, 200, 30));

        backjButton1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        backjButton1.setText("<< Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });
        add(backjButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, 30));

        jLabel5.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel5.setText("Organization");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 100, 30));

        organizationJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        organizationJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationJComboBoxActionPerformed(evt);
            }
        });
        add(organizationJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, 200, 30));

        jLabel4.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel4.setText("Role");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 60, 23));

        roleJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roleJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleJComboBoxActionPerformed(evt);
            }
        });
        add(roleJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 200, 30));

        patientsJLabel.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        patientsJLabel.setText("Patients");
        add(patientsJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 60, 30));

        listOfPatientsJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listOfPatientsJComboBoxActionPerformed(evt);
            }
        });
        add(listOfPatientsJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, 200, 30));

        caregiversJLabel.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        caregiversJLabel.setText("Caregivers");
        add(caregiversJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 220, 90, 30));

        add(careGiverJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 220, 200, 30));

        neurologistJLabel.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        neurologistJLabel.setText("Neurologist");
        add(neurologistJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 270, 90, 30));

        NeurologistJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(NeurologistJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 266, 200, 36));
    }// </editor-fold>//GEN-END:initComponents

    private void createUserJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserJButtonActionPerformed

        //try {
            
        
            String userName = nameJTextField.getText();
            String password = passwordJTextField.getText();
            
            
           boolean isUniqueUserName = true ;
            
           for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList())
           {
             Organization org = (Organization)organizationJComboBox.getSelectedItem();
             //Organization.Type.
             String organizationName = org.getName();
               if(organization.getName().equalsIgnoreCase(organizationName))
               {
                   isUniqueUserName =  organization.getUserAccountDirectory().checkIfUsernameIsUnique(userName, organization);
               }
           }
            
            
            
            
            if (nameJTextField.getText().trim().isEmpty() || passwordJTextField.getText().trim().isEmpty()) { 
                JOptionPane.showMessageDialog(null, "Username and password cannot be blank!");
            }else{
                Organization organization = (Organization) organizationJComboBox.getSelectedItem();
                Employee employee = (Employee) employeeJComboBox.getSelectedItem();

                Role role = (Role) roleJComboBox.getSelectedItem();
                if(isUniqueUserName)
                {
                organization.getUserAccountDirectory().createUserAccount(userName, password, employee, role, system);
                popData();
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Username already taken", "Warning", JOptionPane.WARNING_MESSAGE);
                }
                
                 if(organization.toString().equals("PatientFamily Organization")){
                   
                     
               
       
        
                     
                     
                     
                     
                String patientName = (String)listOfPatientsJComboBox.getSelectedItem();
                String careGiverName = (String)careGiverJComboBox.getSelectedItem();
                String neuroName = (String)NeurologistJComboBox.getSelectedItem();
               // System.out.println("--------" + patientName);
              //      System.out.println("***************" + careGiverName);
                
                PatientFamily pf = organization.getPatientFamilyDirectory().addPatientFamiy();
                Patient p = organization.getPatientDirectory().addPatient();
                Caregiver careGiver = organization.getCgList().addCaregiver();
                //City city = new City();
                //city.setName((String)cityJTextField.getSelectedItem());
                Neurologist neuro = organization.getNeuroList().addNeurologist();
                careGiver.setCareGiverName(careGiverName);
                neuro.setName(neuroName);
                p.setCareGiver(careGiver);
                p.setNeurologist(neuro);
                p.setName(patientName);
                pf.setPatient(p);
               
                pf.setMemberName(employee.toString());
                 }
     
            }
    nameJTextField.setText(" ");
    passwordJTextField.setText(" ");
    }//GEN-LAST:event_createUserJButtonActionPerformed

    private void displayFamily()
    {
        for (State state : system.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise e : city.getEnterprizeDirectory().getEnterprizeList()) {
                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                        for (UserAccount ua : o.getUserAccountDirectory().getUserAccountList()) {

                            for (PatientFamily pf : o.getPatientFamilyDirectory().getPatientFamilyList()) {
                                Patient p = pf.getPatient();
                                Caregiver c = p.getCareGiver();
                                 System.out.println("Family is:\t" + pf.getMemberName() + "\n patient is\t"+
                                         p.getName()+"\tcaregiver is\t"+p.getCareGiver().getCareGiverName());
                                
                                }
                            }
                        }

                    }
                }
            }
        }
    
    private void populatePatientComboBox()
    {
        listOfPatientsJComboBox.removeAllItems();
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
        {
            for(Role role : org.getSupportedRole())
            {
                for(UserAccount ua : org.getUserAccountDirectory().getUserAccountList())
                {
                    if(role.toString().equals("Patient Role"))
                    {
                        listOfPatientsJComboBox.addItem(ua.getEmployee().getName());
                    }
                }
            }
        }
    }
    private void populateNeurologistComboBox()
    {
        NeurologistJComboBox.removeAllItems();
        for (State state : system.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise e : city.getEnterprizeDirectory().getEnterprizeList()){
        for(Organization org : e.getOrganizationDirectory().getOrganizationList())
        {
            for(Role role : org.getSupportedRole())
            {
                for(UserAccount ua : org.getUserAccountDirectory().getUserAccountList())
                {
                    if(role.toString().equals("Neurologist Role"))
                    {
                        NeurologistJComboBox.addItem(ua.getEmployee().getName());
                    }
                }
            }
        }
    }
            }
        }
    }
    public void populateCareGiverComboBox()
    {
        careGiverJComboBox.removeAllItems();
       
        for (State state : system.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise e : city.getEnterprizeDirectory().getEnterprizeList()) {
                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                        for (UserAccount ua : o.getUserAccountDirectory().getUserAccountList()) {

                            for (Role role : o.getSupportedRole()) {
                                if (role.toString().equals("CareGiver Role")) {
                                    careGiverJComboBox.addItem(ua.getEmployee().getName());
                                   // c++;
                                    //System.out.println("Caregiver total is:"+ c );
                                }
                            }
                        }

                    }
                }
            }
        }
    }
    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backjButton1ActionPerformed

    private void organizationJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationJComboBoxActionPerformed
        Organization organization = (Organization) organizationJComboBox.getSelectedItem();
        //String organizationname = (String)organizationJComboBox.getSelectedItem();
        
     /*  if(organizationname.equalsIgnoreCase("PatientFamily Organization"))
        {
            listOfPatientsJComboBox.setVisible(true);
        careGiverJComboBox.setVisible(true);
        NeurologistJComboBox.setVisible(true);
        patientsJLabel.setVisible(true);
        caregiversJLabel.setVisible(true);
        neurologistJLabel.setVisible(true);
        }*/
        if (organization != null) {
            populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
            if(organization.toString().equals("PatientFamily Organization")){
              //  listOfPatientsJComboBox.setVisible(true);
              //  careGiverJComboBox.setVisible(true);
              
              
                 listOfPatientsJComboBox.setVisible(true);
        careGiverJComboBox.setVisible(true);
        NeurologistJComboBox.setVisible(true);
        patientsJLabel.setVisible(true);
        caregiversJLabel.setVisible(true);
        neurologistJLabel.setVisible(true);
                populatePatientComboBox();
                populateCareGiverComboBox();
                populateNeurologistComboBox();
               
                
                
            }
            else
            {
                          listOfPatientsJComboBox.setVisible(false);
        careGiverJComboBox.setVisible(false);
        NeurologistJComboBox.setVisible(false);
        patientsJLabel.setVisible(false);
        caregiversJLabel.setVisible(false);
        neurologistJLabel.setVisible(false);
            }
            //listOfPatientsJComboBox.setVisible(false);
        }
        
    }//GEN-LAST:event_organizationJComboBoxActionPerformed

    private void roleJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roleJComboBoxActionPerformed

    private void listOfPatientsJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listOfPatientsJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listOfPatientsJComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> NeurologistJComboBox;
    private javax.swing.JButton backjButton1;
    private javax.swing.JComboBox<String> careGiverJComboBox;
    private javax.swing.JLabel caregiversJLabel;
    private javax.swing.JButton createUserJButton;
    private javax.swing.JComboBox employeeJComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox listOfPatientsJComboBox;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JLabel neurologistJLabel;
    private javax.swing.JComboBox organizationJComboBox;
    private javax.swing.JTextField passwordJTextField;
    private javax.swing.JLabel patientsJLabel;
    private javax.swing.JComboBox roleJComboBox;
    private javax.swing.JTable userJTable;
    // End of variables declaration//GEN-END:variables
}
