/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;

import Business.State.State;
import Business.city.City;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class ManageNetworkJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;

    /**
     *
     * Creates new form ManageNetworkJPanel
     */
    public ManageNetworkJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.system = system;

        populateNetworkTable();
    }

    private void populateNetworkTable() {
        DefaultTableModel model = (DefaultTableModel) networkJTable.getModel();
        model.setRowCount(0);
        for (State state: system.getStateList()) {
            for(City city : state.getCityList()){
            Object[] row = new Object[2];
            row[0] = state.getName();
            row[1] = city.getName();
            model.addRow(row);
        }
        }
    }
    
    private void populateCityComboBox() {
        cityComboBox.removeAllItems();
        String cityList[] = {"Boston", "Newton"};
        String cityListAlbama[] = {"Brimingham ","Montgomery"};
        String cityListAlska[] ={"Fairbanks ","Sitka"};
        String cityCalifornia[] ={"San Diego","San Jose"};
        String cityColorado[] ={"Boulder","Denver"};
        String cityConnecticut[] = {"Norwalk","Hartford"};
        String cityDelware[] = {"Wilmington","Newark"};
        String cityNewYork[] ={"New York","Kingston"};
        String cityTexas[] = {"Dallas","Austin"};
        String cityWashington[] = {"Seattle","Redmond"};
        
        
         if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("Massachusetts")) {
            for (int i = 0; i < cityList.length; i++) {
                cityComboBox.addItem(cityList[i]);
            }
        }

        if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("Albama")) {
            for (int i = 0; i < cityListAlbama.length; i++) {
                cityComboBox.addItem(cityListAlbama[i]);
            }
        }
        if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("Alaska")) {
            for (int i = 0; i < cityListAlska.length; i++) {
                cityComboBox.addItem(cityListAlska[i]);
            }
        }if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("California")) {
            for (int i = 0; i < cityCalifornia.length; i++) {
                cityComboBox.addItem(cityCalifornia[i]);
            }
        }
        if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("Colorado")) {
            for (int i = 0; i < cityColorado.length; i++) {
                cityComboBox.addItem(cityColorado[i]);
            }
        }
        if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("Connecticut")) {
            for (int i = 0; i < cityConnecticut.length; i++) {
                cityComboBox.addItem(cityConnecticut[i]);
            }
        }
        if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("Delaware")) {
            for (int i = 0; i < cityDelware.length; i++) {
                cityComboBox.addItem(cityDelware[i]);
            }
        }
        if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("New York")) {
            for (int i = 0; i < cityNewYork.length; i++) {
                cityComboBox.addItem(cityNewYork[i]);
            }
        }
        if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("Texas")) {
            for (int i = 0; i < cityTexas.length; i++) {
                cityComboBox.addItem(cityTexas[i]);
            }
        }
        if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("Washington")) {
            for (int i = 0; i < cityWashington.length; i++) {
                cityComboBox.addItem(cityWashington[i]);
            }
        }
        
    }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        networkJTable = new javax.swing.JTable();
        submitJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        stateComboBox = new javax.swing.JComboBox<>();
        cityComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        networkJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "State Name", "City Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(networkJTable);
        if (networkJTable.getColumnModel().getColumnCount() > 0) {
            networkJTable.getColumnModel().getColumn(0).setResizable(false);
            networkJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 404, 120));

        submitJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        submitJButton.setText("Add");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 320, 160, 35));

        backJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 84, 33));

        stateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alaska", "California", "Colorado", "Connecticut", "Delaware", "Massachusetts", "New York", "Texas", "Washington" }));
        stateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateComboBoxActionPerformed(evt);
            }
        });
        add(stateComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 220, 160, 30));

        add(cityComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 270, 160, 29));

        jLabel2.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel2.setText("State");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, 80, 30));

        jLabel3.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel3.setText("City");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 270, 80, 27));

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel1.setText("Manage your state and city!");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 260, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        /* State state = (State)stateCombBox.getSelectedItem();
      
         String stateName = state.getName();
         String [] = {"Boston","Newton"};
         JComboBox cityComboBox = new JComboBox(Masacheussets);
         JComboBox cityComboBox = new JComboBox();
         */
        
      //  String stateName = stateNameJTextField.getText();
      //  String cityName = cityNameJTextField.getText();
       
      
      
          
        String stateName = (String) stateComboBox.getSelectedItem();
        String cityName = (String) cityComboBox.getSelectedItem();
        
        
        for(State state : system.getStateList())
        {
            
            
            if(state.getName().equalsIgnoreCase(stateName))
            {
                 boolean isUniqueNetwork =  state.checkIfNetworkIsUnique( stateName, cityName, state);
                 if(isUniqueNetwork)
                 {
                    City city = state.createAndAddCity();
                    city.setName(cityName);
                    break;
                 }
                 else
                 {
                     JOptionPane.showMessageDialog(null, "Network already exists", "Warning", JOptionPane.WARNING_MESSAGE);
                 }
            }
        
           else
            {
            State newState = system.createAndAddState();
            newState.setName(stateName);
            City city = newState.createAndAddCity();
            city.setName(cityName);

        populateNetworkTable();
            }
        }
        
        
        if(system.getStateList().size() == 0)
        {
             State newState = system.createAndAddState();
            newState.setName(stateName);
            City city = newState.createAndAddCity();
            city.setName(cityName);

        populateNetworkTable();
        }
    
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
         Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void stateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateComboBoxActionPerformed
        // TODO add your handling code here:
       // if (stateComboBox.getSelectedItem().toString().equalsIgnoreCase("Massachusetts"))
       // {
           populateCityComboBox();
           
       // }
        
    }//GEN-LAST:event_stateComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JComboBox<String> cityComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable networkJTable;
    private javax.swing.JComboBox<String> stateComboBox;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
