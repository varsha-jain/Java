/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.medicalPractitioner;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.CareGiverOrganization;
import Business.Organization.ChiefNursePractitionerOrganization;
import Business.Organization.MedicalPractitionerOrganization;
import Business.Organization.Organization;
import Business.Organization.ResearcherOrganization;
import Business.Patient.Patient;
import Business.PatientFamily.PatientFamily;
import Business.State.State;
import Business.WorkQueue.ResearchAnalysisWorkRequest;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CaregiverToMedicalPractitioner;
import Business.WorkQueue.GroupChatCommunication;
import Business.WorkQueue.VolunteerMedicalPracWorkRequest;
import Business.WorkQueue.WorkRequest;
import Business.city.City;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.caregiver.PatientsTaskListJPanel;


/**
 *
 * @author varsha
 */
public class MedicalPractitionerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MedicalPractitionerWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private MedicalPractitionerOrganization medicalorganization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    private VolunteerMedicalPracWorkRequest request;
    public MedicalPractitionerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.enterprise = enterprise;
        this.userAccount = account;
         this.medicalorganization =(MedicalPractitionerOrganization) organization;
       //  this.request = request;
       mpNameJLabel.setText(userAccount.getEmployee().getName());
        populateRequestTable();
        
        
      

    }

    /**

     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        String username = userAccount.getUsername();
        model.setRowCount(0);
         Object[] row = new Object[4];
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
         //   Object[] row = new Object[4];
       //  if(request instanceof  CaregiverToMedicalPractitioner){
            row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getSender();
            row[3] = request.getStatus();
            model.addRow(row);
        // }
       /*  if(request instanceof VolunteerMedicalPracWorkRequest)
         {
             row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getSender();
            row[3] = request.getStatus();
            model.addRow(row);
         }*/
           // String result = ((ResearchAnalysisWorkRequest) request).getTestResult();
           // row[3] = result == null ? "Waiting" : result;
            
            //model.addRow(row);
        }
        
        for(WorkRequest request : medicalorganization.getWorkQueue().getWorkRequestList()){
           // Object[] row = new Object[4];
            //row[0] = request.getMessage();
            row[0] = request;
            row[1] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[2] = request.getSender().getEmployee().getName();
            
            row[3] = request.getStatus();
            
            model.addRow(row);
        }
        
        
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requestResearchJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assistCaregiverJButton = new javax.swing.JButton();
        mpCommentJTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        mpNameJLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        advancedAnalysisJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        requestResearchJButton.setText("Request for Research");
        requestResearchJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestResearchJButtonActionPerformed(evt);
            }
        });
        add(requestResearchJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, 200, 40));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Receiver", "Sender", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 73, -1, 150));

        assistCaregiverJButton.setText("Assist Caregivers");
        assistCaregiverJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assistCaregiverJButtonActionPerformed(evt);
            }
        });
        add(assistCaregiverJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, 200, 40));
        add(mpCommentJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 320, 160, 40));

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel1.setText("Welcome");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 19, 74, 30));
        add(mpNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 19, 290, 30));

        jButton1.setText("Assign to me");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 250, 160, 40));

        advancedAnalysisJButton.setText("Detection of Alzhiemers");
        advancedAnalysisJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedAnalysisJButtonActionPerformed(evt);
            }
        });
        add(advancedAnalysisJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 380, 200, 39));
    }// </editor-fold>//GEN-END:initComponents

    private void requestResearchJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestResearchJButtonActionPerformed
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("RequestAnalysisJPanel", new RequestAnalysisJPanel(userProcessContainer, userAccount, enterprise));
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_requestResearchJButtonActionPerformed

    private void assistCaregiverJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assistCaregiverJButtonActionPerformed
        // TODO add your handling code here:
       int selectedRow = workRequestJTable.getSelectedRow();
       if(selectedRow < 0)
           JOptionPane.showMessageDialog(null,"Please select a row first!");
        CaregiverToMedicalPractitioner cgtmp = (CaregiverToMedicalPractitioner)workRequestJTable.getValueAt(selectedRow, 0);
        if(mpCommentJTextField.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null,"Type in your message for caregiver!");
        }
        else
        {
        cgtmp.setTestResult(mpCommentJTextField.getText());
        cgtmp.setStatus("Completed");
        populateRequestTable();
        //JOptionPane.showMessageDialog(null,"Messa");
        mpCommentJTextField.setText(" ");
        }
    }//GEN-LAST:event_assistCaregiverJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateRequestTable();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void advancedAnalysisJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedAnalysisJButtonActionPerformed
        // TODO add your handling code here:
       
      for(State state : business.getStateList())
        {
            for(City city : state.getCityList())
            {
                for(Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList())
                {
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        for (Patient p : org.getPatientDirectory().getPatientList())
                        {
                           
                            if(p.isEarlyAlzhimers()==true)
                            {
                                p.setModerateAlzhimers(generateAlzheimers());
                                 JOptionPane.showMessageDialog(null,"Advanced analysis and tests performed - 2nd stage analysis");
                                if(p.isModerateAlzhimers() == true)
                                    p.setHighAlzhiemers(generateAlzheimers());
                                JOptionPane.showMessageDialog(null,"Advanced analysis and tests performed");
                            }
                            
                        }
                    }
                    
                }
            } 
            
        }


// for(Patient p : medicalorganization.getPatientDirectory().getPatientList())
     /* {
          if(p.isEarlyAlzhimers()==true)
          {
              p.setModerateAlzhimers(generateAlzheimers());
               JOptionPane.showMessageDialog(null,"Advanced analysis and tests performed - 2nd stage analysis");
              if(p.isModerateAlzhimers() == true)
                  p.setHighAlzhiemers(generateAlzheimers());
              JOptionPane.showMessageDialog(null,"Advanced analysis and tests performed");
          }
            JOptionPane.showMessageDialog(null,"test");
      }
        */
    }//GEN-LAST:event_advancedAnalysisJButtonActionPerformed

    public static boolean generateAlzheimers()
   {
       boolean[] array = {true, false};
       Random rand = new Random();
       boolean level = array[rand.nextInt(array.length)];
       return level;
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton advancedAnalysisJButton;
    private javax.swing.JButton assistCaregiverJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mpCommentJTextField;
    private javax.swing.JLabel mpNameJLabel;
    private javax.swing.JButton requestResearchJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
