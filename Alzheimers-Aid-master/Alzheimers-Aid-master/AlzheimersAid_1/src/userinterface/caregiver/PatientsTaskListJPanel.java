/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.caregiver;

import Business.Date.Time;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Medicine.Medicine;
import Business.Medicine.MedicineList;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.PatientFamily.PatientFamily;
import Business.PatientFamily.PatientFamilyDirectory;
import Business.Role.PatientRole;
import Business.Schedule.Task;
import Business.Schedule.TaskList;
import Business.State.State;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AddTasksForPatient;
import Business.city.City;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author varsha
 */
public class PatientsTaskListJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientsTaskListJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private TaskList taskList;
    private MedicineList medicineList;
    private  String medicineName1;
    private  String medicineName2;
    private  String medicineName3;
    private  String medicineName4;
    private Enterprise enterprise;
    private EcoSystem system;
    public PatientsTaskListJPanel(JPanel userProcessContainer, UserAccount account, TaskList taskList, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.taskList = taskList;
        medicineList = new MedicineList();
        this.enterprise = enterprise;
        this.system = system;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        med1 = new javax.swing.JCheckBox();
        med2 = new javax.swing.JCheckBox();
        med3 = new javax.swing.JCheckBox();
        puzzle = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        timeTask1JTextField = new javax.swing.JTextField();
        timeTask2JTextField = new javax.swing.JTextField();
        timeTask3JTextField = new javax.swing.JTextField();
        med4 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        timeTask4JTextField = new javax.swing.JTextField();
        addTasksJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel1.setText("Add Tasks!");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(265, 41, 100, 34));

        med1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        med1.setText("Donepezil");
        med1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                med1ActionPerformed(evt);
            }
        });
        add(med1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 110, 27));

        med2.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        med2.setText("Rivastigmine");
        med2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                med2ActionPerformed(evt);
            }
        });
        add(med2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 110, -1));

        med3.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        med3.setText("Galantamine");
        med3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                med3ActionPerformed(evt);
            }
        });
        add(med3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, 110, 30));

        puzzle.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        puzzle.setText("Brain Puzzles");
        puzzle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puzzleActionPerformed(evt);
            }
        });
        add(puzzle, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 420, 120, -1));

        jLabel2.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel2.setText("Time: (YYYY-MM-DD HH:MM:SS)");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 142, 210, 27));
        add(timeTask1JTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 180, 170, 30));
        add(timeTask2JTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 330, 170, 30));
        add(timeTask3JTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 230, 170, 30));

        med4.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        med4.setText("memantine");
        med4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                med4ActionPerformed(evt);
            }
        });
        add(med4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 333, 110, 30));

        jLabel5.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel5.setText("Medicines:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 140, 100, 29));

        jLabel6.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel6.setText("Other tasks:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 380, 110, 25));
        add(timeTask4JTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 170, 30));

        addTasksJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        addTasksJButton.setText("Add Tasks");
        addTasksJButton.setEnabled(false);
        addTasksJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTasksJButtonActionPerformed(evt);
            }
        });
        add(addTasksJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 170, 37));

        backJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 110, 40));

        jLabel3.setFont(new java.awt.Font("Corbel", 2, 14)); // NOI18N
        jLabel3.setText("Please enter duration for each medicine");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 116, 230, 20));
    }// </editor-fold>//GEN-END:initComponents

    private void addTasksJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTasksJButtonActionPerformed
        // TODO add your handling code here:
      
        /* DateFormat sdfrmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        sdfrmt.setLenient(false);
        Date date = null;
        Date date1 = null;
        Date date2 = null;
        Date date3 = null;
        try
        {
            if(!timeTask1JTextField.getText().trim().isEmpty()){
          date = sdfrmt.parse(timeTask1JTextField.getText());
          date1 = sdfrmt.parse(timeTask2JTextField.getText());
          date2 = sdfrmt.parse(timeTask3JTextField.getText());
          date3 = sdfrmt.parse(timeTask4JTextField.getText());
          
            }
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Enter valid date.");
            //return;
        }*/
     
        if((med1.isSelected() && timeTask1JTextField.getText().trim().isEmpty())
                || (med2.isSelected() && timeTask2JTextField.getText().trim().isEmpty())
                || (med3.isSelected() && timeTask3JTextField.getText().trim().isEmpty())
                || (med4.isSelected() && timeTask4JTextField.getText().trim().isEmpty()))
        {
            JOptionPane.showMessageDialog(null,"Enter the medicine time as well.");
        }
        else
        {
       
            
        
        Task task;
        Time time = new Time();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date d = null;
        
        Medicine medicine;
       
        
        if (med1.isSelected()) {
            medicineName1 = med1.getText();
            medicine = medicineList.addMedicine();
            task = taskList.addTask();
            medicine.setMedicineName(medicineName1);
            try {
                d = df.parse(timeTask1JTextField.getText());
               // System.out.println(d);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Enter valid date.");
                return;
            }
            time.setTime_taken(d);
            task.setMedicine(medicine);
            task.setScheduledDateTime(time);
            task.setTaskName("Take Medicine");
            String message = "Take Medicine";
          AddTasksForPatient request = new AddTasksForPatient();
          request.setMessage(message+ " " + medicineName1 + "on" + task.getScheduledDateTime());
          request.setSender(account);
          request.setStatus("Sent");
         
        Organization org = null;
        
        for (State state : system.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList()) {
                    
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof PatientOrganization) {
                                org = organization;
                                break;
                            
                        }
                    }
                }
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            account.getWorkQueue().getWorkRequestList().add(request);
        }
        }
        if (med2.isSelected()) {
            time = new Time();
            
            medicineName2 = med2.getText();
            medicine = medicineList.addMedicine();
            medicine.setMedicineName(medicineName2);
            try {
                d = df.parse(timeTask2JTextField.getText());
                System.out.println(d);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Enter valid date.");
                return;
            }
            time.setTime_taken(d);
            task = taskList.addTask();
            task.setMedicine(medicine);
            task.setScheduledDateTime(time);
            task.setTaskName("Take Medicine");
            
            String message1 = "Take Medicine";
          AddTasksForPatient request1 = new AddTasksForPatient();
          request1.setMessage(message1+ " " + medicineName2 + " on " + task.getScheduledDateTime());
          request1.setSender(account);
          request1.setStatus("Sent");
         
        Organization org = null;
        
        for (State state : system.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList()) {
                     
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof PatientOrganization) {
                                org = organization;
                                break;
                            }
                        }
                    }
                }
            }
        
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request1);
            account.getWorkQueue().getWorkRequestList().add(request1);
        }
        }
        if (med3.isSelected()) {
           
            time = new Time();
            medicineName3 = med3.getText();
            medicine = medicineList.addMedicine();
            medicine.setMedicineName(medicineName3);
            try {
                d = df.parse(timeTask3JTextField.getText());
                System.out.println(d);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Enter valid date.");
                return;
            }
            time.setTime_taken(d);
            task = taskList.addTask();
            task.setMedicine(medicine);
            task.setScheduledDateTime(time);
            task.setTaskName("Take Medicine");
            
            
          String message3 = "Take Medicine";
          AddTasksForPatient request3 = new AddTasksForPatient();
          request3.setMessage(message3+ " " + medicineName3 + " on " + task.getScheduledDateTime());
          request3.setSender(account);
          request3.setStatus("Sent");
         
        Organization org = null;
        
        for (State state : system.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList()) {
                     
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof PatientOrganization) {
                                org = organization;
                                break;
                            }
                        }
                    }
                }
            }
        
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request3);
            account.getWorkQueue().getWorkRequestList().add(request3);
        }
        }
        if (med4.isSelected()) {
        
            time = new Time();
            medicineName4 = med4.getText();
            medicine = medicineList.addMedicine();
            medicine.setMedicineName(medicineName4);
            try {
                d = df.parse(timeTask4JTextField.getText());
                System.out.println(d);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Enter valid date.");
                return;
            }
            time.setTime_taken(d);
            task = taskList.addTask();
            task.setMedicine(medicine);
            task.setScheduledDateTime(time);
            task.setTaskName("Take Medicine");
            
            
             String message4 = "Take Medicine";
          AddTasksForPatient request4 = new AddTasksForPatient();
          request4.setMessage(message4+ " " + medicineName4 + " on " + task.getScheduledDateTime());
          request4.setSender(account);
          request4.setStatus("Sent");
         
        Organization org = null;
        
        for (State state : system.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList()) {
                     
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof PatientOrganization) {
                                org = organization;
                                break;
                            }
                        }
                    }
                }
            }
        
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request4);
            account.getWorkQueue().getWorkRequestList().add(request4);
        }
        
        }
        if(puzzle.isSelected())
        {
          task = taskList.addTask();  
          task.setTaskName("play puzzle");
          
          String message5 = "play puzzle";
          AddTasksForPatient request5 = new AddTasksForPatient();
          request5.setMessage(message5);
          request5.setSender(account);
          request5.setStatus("Sent");
         
        Organization org = null;
        
        for (State state : system.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList()) {
                     
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof PatientOrganization) {
                                org = organization;
                                break;
                            }
                        }
                    }
                }
            }
        
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request5);
            account.getWorkQueue().getWorkRequestList().add(request5);
        }
        }
        JOptionPane.showMessageDialog(null, "Task List updated successfully!");
        }       
    }//GEN-LAST:event_addTasksJButtonActionPerformed

            
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void med1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_med1ActionPerformed
        // TODO add your handling code here:
        if(med1.isSelected())
            addTasksJButton.setEnabled(true);
        else
            addTasksJButton.setEnabled(false);
    }//GEN-LAST:event_med1ActionPerformed

    private void med2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_med2ActionPerformed
        // TODO add your handling code here:
       if(med2.isSelected())
            addTasksJButton.setEnabled(true);
        else
            addTasksJButton.setEnabled(false);
    }//GEN-LAST:event_med2ActionPerformed

    private void med3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_med3ActionPerformed
        // TODO add your handling code here:
        if(med3.isSelected())
            addTasksJButton.setEnabled(true);
        else
            addTasksJButton.setEnabled(false);
    }//GEN-LAST:event_med3ActionPerformed

    private void med4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_med4ActionPerformed
        // TODO add your handling code here:
        if(med4.isSelected())
            addTasksJButton.setEnabled(true);
        else
            addTasksJButton.setEnabled(false);
    }//GEN-LAST:event_med4ActionPerformed

    private void puzzleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puzzleActionPerformed
        // TODO add your handling code here:
       if(puzzle.isSelected())
            addTasksJButton.setEnabled(true);
        else
            addTasksJButton.setEnabled(false);
    }//GEN-LAST:event_puzzleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTasksJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JCheckBox med1;
    private javax.swing.JCheckBox med2;
    private javax.swing.JCheckBox med3;
    private javax.swing.JCheckBox med4;
    private javax.swing.JCheckBox puzzle;
    private javax.swing.JTextField timeTask1JTextField;
    private javax.swing.JTextField timeTask2JTextField;
    private javax.swing.JTextField timeTask3JTextField;
    private javax.swing.JTextField timeTask4JTextField;
    // End of variables declaration//GEN-END:variables
}
