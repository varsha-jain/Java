/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.caregiver;

import Business.Activities.Bathing;
import Business.Activities.Brushing;
import Business.Activities.Eating;
import Business.Activities.Mobility;
import Business.Date.Time;
import Business.EcoSystem;
import Business.Enterprise.AssociationEnterprise;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Organization.VolunteerOrganization;
import Business.Patient.Patient;
import Business.PatientFamily.PatientFamily;
import Business.PatientFamily.PatientFamilyDirectory;
import Business.Role.PatientRole;
import Business.State.State;
import Business.UserAccount.UserAccount;
import Business.VitalSign.VitalSignHistory;
import Business.VitalSign.VitalSigns;
import Business.city.City;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nirali Merchant
 */
public class ManageVitalSignsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageVitalSigns
     */
    private JPanel userProcessContainer;
    private VitalSignHistory vsh;
    
    
    private EcoSystem system;
    private UserAccount account;
    public String mood;
    public ManageVitalSignsJPanel(JPanel userProcessContainer, VitalSignHistory vsh, UserAccount account, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.vsh = vsh;
        this.account = account;
       this.system = system;
       // showTime();
        //Patient patient = null;
       /* for(State state : system.getStateList())
        {
            for(City city : state.getCityList())
            {
                for(Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList())
                {
                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                    {
                        for (PatientFamily pf : org.getPatientFamilyDirectory().getPatientFamilyList())
                        {
                            Patient p  = pf.getPatient();
                            if(p.getCareGiver().getCareGiverName().equalsIgnoreCase(account.getEmployee().getName()))
                            {
                               patientNameJLabel.setText(p.getName());
                            }
                            
                        }
                    }
                    
                }
            }
        }*/
                   
        
    }
    
    public boolean validateEmpty()
    {
      
        if(temperatureTextField.getText().trim().isEmpty() || bloodPressureTextField.getText().trim().isEmpty()
                || pulseTextField.getText().trim().isEmpty()||
                dateJTextField.getText().trim().isEmpty() || 
                timeTextField.getText().trim().isEmpty())
        {
          JOptionPane.showMessageDialog(null,"Blank fields are not allowed");
          return true;
        }
        else
        {
            
            return false;
        }   
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addVitalSigns = new javax.swing.JButton();
        temperatureJLabel = new javax.swing.JLabel();
        temperatureTextField = new javax.swing.JTextField();
        bloodPressureTextField = new javax.swing.JTextField();
        pulseJLabel = new javax.swing.JLabel();
        pulseTextField = new javax.swing.JTextField();
        dateJLabel = new javax.swing.JLabel();
        timeTextField = new javax.swing.JTextField();
        moodComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        brushingJSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        bathingJSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        eatingJSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lossOfBalanceJSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        patientNameJLabel = new javax.swing.JLabel();
        dateJTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addVitalSigns.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        addVitalSigns.setText("Record");
        addVitalSigns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVitalSignsActionPerformed(evt);
            }
        });
        add(addVitalSigns, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 139, 38));

        temperatureJLabel.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        temperatureJLabel.setText("Temperature");
        add(temperatureJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 80, 34));

        temperatureTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                temperatureTextFieldFocusLost(evt);
            }
        });
        add(temperatureTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, 140, 30));

        bloodPressureTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                bloodPressureTextFieldFocusLost(evt);
            }
        });
        add(bloodPressureTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 140, 29));

        pulseJLabel.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        pulseJLabel.setText("Pulse");
        add(pulseJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 90, 27));

        pulseTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pulseTextFieldFocusLost(evt);
            }
        });
        add(pulseTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 260, 140, 27));

        dateJLabel.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        dateJLabel.setText("Time");
        add(dateJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 80, 22));
        add(timeTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, 140, 30));

        moodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Agitated", "Annoyed", "Bewildered", "Bored", "Calm", "Cranky", "Defensive", "Frustated", "Gloomy", "Grumpy", "Hyper", "Happy", "Irritated", "Restless", "Sad", "Tired", " " }));
        add(moodComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, 140, 27));

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel1.setText("Mood");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 80, 27));

        jLabel2.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel2.setText("Brushing");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 80, 28));
        add(brushingJSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, 40, 28));

        jLabel3.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel3.setText("Bathing");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 90, 32));
        add(bathingJSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, 40, 26));

        jLabel4.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel4.setText("Eating");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 80, 32));
        add(eatingJSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 420, 40, 32));

        jLabel5.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel5.setText("Record Pateints Vital Signs and Details of");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 27, 250, 30));

        jLabel6.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel6.setText("Loss of Balance");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 121, 28));
        add(lossOfBalanceJSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 460, 40, 28));

        jLabel7.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel7.setText("F");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 170, 22, 30));

        jLabel8.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel8.setText("per min");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 260, 50, 29));

        backJButton.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 100, 40));

        jLabel9.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel9.setText("Blood Pressure");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 120, 31));

        patientNameJLabel.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        add(patientNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, 180, 40));
        add(dateJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 140, 30));

        jLabel10.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel10.setText("Date");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 80, 30));

        jLabel11.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel11.setText("(YYYY-MM-DD)");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 100, 30));

        jLabel12.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel12.setText("(HH:MM:SS)");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, 100, 30));

        jLabel13.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel13.setText("Range(60-100)");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 260, 90, 30));

        jLabel14.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel14.setText("Range(95.0 -106.7 )");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, 120, 30));

        jLabel15.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        jLabel15.setText("Range(60-170)");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 210, 140, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void addVitalSignsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVitalSignsActionPerformed
        // TODO add your handling code here:
        if(!validateEmpty())
        {
            validateVitalSign();
        }
       
        
    }//GEN-LAST:event_addVitalSignsActionPerformed
    public void clear()
    {
        temperatureTextField.setText(" ");
        bloodPressureTextField.setText("");
        pulseTextField.setText("");
         dateJTextField.setText("");
                timeTextField.setText("");
    }
    public void validateVitalSign()
    {
        
            try{
                Double temperature = Double.parseDouble(temperatureTextField.getText());
            
             int pulse = Integer.parseInt(pulseTextField.getText());
             int bp = Integer.parseInt(bloodPressureTextField.getText());
            if(temperature < 95.0 || temperature >106.7 || pulse < 60 || pulse >100 || bp < 60 || bp > 170)
            {
                JOptionPane.showMessageDialog(null,"Enter data within the range!");
                temperatureTextField.setText("");
                bloodPressureTextField.setText("");
                pulseTextField.setText("");
                dateJTextField.setText("");
                timeTextField.setText("");
               //return true; 
            }
            else
            {
                create();
            }
            }
            catch(Exception e){          
       
           /*JOptionPane.showMessageDialog(null,"Enter data within the range!");
           temperatureTextField.setText("");
                bloodPressureTextField.setText("");
                pulseTextField.setText("");
                dateJTextField.setText("");
                timeTextField.setText("");*/
           //return;
           
        }
            
           mood  = (String)moodComboBox.getSelectedItem();
        
    }
            
    public void create() {

        for (State state : system.getStateList()) {
            for (City city : state.getCityList()) {
                for (Enterprise enterprise : city.getEnterprizeDirectory().getEnterprizeList()) {
                    if (enterprise.getEnterprizeType().equals(Enterprise.EnterprizeType.Association)) {

                        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            //if (!(org instanceof VolunteerOrganization ))
                               //     {        
                            VitalSigns vs = new VitalSigns();
                            for (Patient p : org.getPatientDirectory().getPatientList()) {
                                if(p.getCareGiver().getCareGiverName().equalsIgnoreCase(account.getEmployee().getName())){
                                vs = p.getVsh().addVitalSigns();
                                p.setMood(mood);

                                Brushing brush = new Brushing();
                                Bathing bath = new Bathing();
                                Eating eat = new Eating();
                                Mobility balance = new Mobility();
                                Time time = new Time();
                                String t = dateJTextField.getText();
                                
                                DateFormat df = new SimpleDateFormat("HH:mm:ss");
                                Date d = null;
                                try {
                                    d = df.parse(timeTextField.getText());//set time
                                    System.out.println(d);
                                } catch (Exception e) {
                                    return;
                                }
                                time.setTime_taken(d);
                                vs.setTemperature(Double.parseDouble(temperatureTextField.getText()));
                                vs.setBloodPressure(Integer.parseInt(bloodPressureTextField.getText()));
                                vs.setPulse(Integer.parseInt(pulseTextField.getText()));
                                vs.setTime(time);
                                vs.setTimeRecord(t);//set the date
                                
                                int countBrush = (Integer) brushingJSpinner.getValue();
                                int countbath = (Integer) bathingJSpinner.getValue();
                                int countEat = (Integer) eatingJSpinner.getValue();
                                int countBalance = (Integer) lossOfBalanceJSpinner.getValue();
                                brush.setCountTimes(countBrush);
                                bath.setCountBath(countbath);
                                eat.setCountEat(countEat);
                                balance.setCountBalance(countBalance);
                             //   }
                            }
                            }

                        }
                    }
                }
            }
        }

        JOptionPane.showMessageDialog(null, "Vital Sign recorded!");
        clear();

    }

    private void temperatureTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_temperatureTextFieldFocusLost
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_temperatureTextFieldFocusLost

    private void pulseTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pulseTextFieldFocusLost
        // TODO add your handling code here:
       
        
    }//GEN-LAST:event_pulseTextFieldFocusLost

    private void bloodPressureTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bloodPressureTextFieldFocusLost
        // TODO add your handling code here:
       
    }//GEN-LAST:event_bloodPressureTextFieldFocusLost

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVitalSigns;
    private javax.swing.JButton backJButton;
    private javax.swing.JSpinner bathingJSpinner;
    private javax.swing.JTextField bloodPressureTextField;
    private javax.swing.JSpinner brushingJSpinner;
    private javax.swing.JLabel dateJLabel;
    private javax.swing.JTextField dateJTextField;
    private javax.swing.JSpinner eatingJSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSpinner lossOfBalanceJSpinner;
    private javax.swing.JComboBox<String> moodComboBox;
    private javax.swing.JLabel patientNameJLabel;
    private javax.swing.JLabel pulseJLabel;
    private javax.swing.JTextField pulseTextField;
    private javax.swing.JLabel temperatureJLabel;
    private javax.swing.JTextField temperatureTextField;
    private javax.swing.JTextField timeTextField;
    // End of variables declaration//GEN-END:variables
}
